From d5ffd93d2a767176d32b8da7a4693ee1c3d15a54 Mon Sep 17 00:00:00 2001
From: Silvio Lazzeretti <silviola@amazon.com>
Date: Mon, 16 Mar 2020 11:23:55 +0100
Subject: [PATCH] gwin32: remove automatic handling of AccessViolation,
 StackOverflow and IllegalInstruction exceptions

---
 glib/gwin32.c | 59 ++++++++++++++++++++-------------------------------
 1 file changed, 23 insertions(+), 36 deletions(-)

diff --git a/glib/gwin32.c b/glib/gwin32.c
index 2f2fe05a8..0570a1be8 100644
--- a/glib/gwin32.c
+++ b/glib/gwin32.c
@@ -1044,13 +1044,10 @@ static void *WinVEH_handle = NULL;
  * the exception when Windows re-raises it again.
  * The command line can't be longer than MAX_PATH (260 characters).
  *
- * This function will only stop (and run a debugger) on the following exceptions:
- * * EXCEPTION_ACCESS_VIOLATION
- * * EXCEPTION_STACK_OVERFLOW
- * * EXCEPTION_ILLEGAL_INSTRUCTION
- * To make it stop at other exceptions one should set the G_VEH_CATCH
- * environment variable to a list of comma-separated hexademical numbers,
- * where each number is the code of an exception that should be caught.
+ * To make this function stop (and run a debugger) on an exceptions
+ * one should set the G_VEH_CATCH environment variable to a list of
+ * comma-separated hexademical numbers, where each number is the code
+ * of an exception that should be caught.
  * This is done to prevent GLib from breaking when Windows uses
  * exceptions to shuttle information (SetThreadName(), OutputDebugString())
  * or for control flow.
@@ -1077,38 +1074,28 @@ g_win32_veh_handler (PEXCEPTION_POINTERS ExceptionInfo)
 
   er = ExceptionInfo->ExceptionRecord;
 
-  switch (er->ExceptionCode)
-    {
-    case EXCEPTION_ACCESS_VIOLATION:
-    case EXCEPTION_STACK_OVERFLOW:
-    case EXCEPTION_ILLEGAL_INSTRUCTION:
-      break;
-    default:
-      catch_list = getenv ("G_VEH_CATCH");
+  catch_list = getenv ("G_VEH_CATCH");
 
-      while (!catch &&
-             catch_list != NULL &&
-             catch_list[0] != 0)
-        {
-          unsigned long  catch_code;
-          char          *end;
-          errno = 0;
-          catch_code = strtoul (catch_list, &end, 16);
-          if (errno != NO_ERROR)
-            break;
-          catch_list = end;
-          if (catch_list != NULL && catch_list[0] == ',')
-            catch_list++;
-          if (catch_code == er->ExceptionCode)
-            catch = TRUE;
-        }
-
-      if (catch)
-        break;
-
-      return EXCEPTION_CONTINUE_SEARCH;
+  while (!catch &&
+         catch_list != NULL &&
+         catch_list[0] != 0)
+    {
+      unsigned long  catch_code;
+      char          *end;
+      errno = 0;
+      catch_code = strtoul (catch_list, &end, 16);
+      if (errno != NO_ERROR)
+        return EXCEPTION_CONTINUE_SEARCH;
+      catch_list = end;
+      if (catch_list != NULL && catch_list[0] == ',')
+        catch_list++;
+      if (catch_code == er->ExceptionCode)
+        catch = TRUE;
     }
 
+  if (!catch)
+    return EXCEPTION_CONTINUE_SEARCH;
+
   fprintf_s (stderr,
              "Exception code=0x%lx flags=0x%lx at 0x%p",
              er->ExceptionCode,
-- 
2.20.1.windows.1

